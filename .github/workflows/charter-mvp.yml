name: charter-mvp
on:
  workflow_dispatch:
    inputs:
      city:
        description: "Filtro de ciudad o provincia (slug o texto). Ej.: barcelona"
        required: false
        default: "barcelona"
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build JSON desde sitemap (sin AJAX)
        env:
          CITY: ${{ github.event.inputs.city }}
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const ORIGIN = "https://www.consum.es";
          const CITY = (process.env.CITY || "barcelona").toLowerCase();

          const H = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language": "es-ES,es;q=0.9"
          };

          async function get(u, opt={}) {
            const r = await fetch(u, { headers: H, ...opt });
            const t = await r.text();
            if (!r.ok) throw new Error(`HTTP ${r.status} ${u}\n${t.slice(0,300)}`);
            return t;
          }

          // Extrae <loc> de un sitemap o sitemapindex
          function parseSitemap(xml){
            const locs = [...xml.matchAll(/<loc>([^<]+)<\/loc>/g)].map(m=>m[1].trim());
            return locs;
          }

          // Devuelve todas las URLs /supermercados/ desde sitemap(s)
          async function collectStoreUrls(){
            const root = await get(`${ORIGIN}/sitemap.xml`);
            const entries = parseSitemap(root);
            const sitemapUrls = entries.filter(x => x.includes("sitemap"));
            let candidates = [];
            if (sitemapUrls.length) {
              for (const sm of sitemapUrls) {
                const xml = await get(sm);
                candidates.push(...parseSitemap(xml));
              }
            } else {
              candidates = entries;
            }
            // solo p치ginas del 치rea de supermercados
            const urls = candidates
              .filter(u => u.includes("/supermercados/"))
              // pre-filtro r치pido por slug si aparece en la URL
              .filter(u => u.toLowerCase().includes(CITY) || CITY === "all");
            return Array.from(new Set(urls));
          }

          // Intenta hallar el node id en la ficha
          function extractNodeId(html){
            const m = html.match(/geofield-map-node-centro-(\d+)-field-coordenadas/);
            return m ? m[1] : null;
          }

          async function getMapByNodeId(id){
            const url = `${ORIGIN}/get-map/${id}/`;
            const r = await fetch(url, { headers: { "Accept": "application/json", ...H } });
            const text = await r.text();
            try { return JSON.parse(text); } catch { return null; }
          }

          function isCharterFeature(f){
            const icon = String(f?.properties?.icon || "").toLowerCase();
            const html = String(f?.properties?.description || "").toLowerCase();
            return icon.includes("icon_map_charter") || html.includes(" charter");
          }

          (async ()=>{
            await fs.mkdir("docs/debug", { recursive: true });

            const urls = await collectStoreUrls();
            console.error(`[SITEMAP] urls prefiltradas=${urls.length}`);

            const items = [];
            for (const u of urls) {
              try {
                const html = await get(u);
                // filtro adicional por texto si la URL no contiene el slug
                if (!u.toLowerCase().includes(CITY)) {
                  const addrHit = html.toLowerCase().includes(CITY);
                  if (!addrHit) continue;
                }
                const id = extractNodeId(html);
                if (!id) continue;

                const json = await getMapByNodeId(id);
                const feats = json?.[0]?.settings?.geofield_google_map;
                const all = feats ? Object.values(feats).flatMap(b => b?.data?.features || []) : [];
                const charter = all.find(isCharterFeature);
                if (!charter) continue;

                const p = charter.properties || {};
                const d = p.data || {};
                const c = charter.geometry?.coordinates || [null,null];
                const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || u;

                // Provincia y ciudad aproximadas desde la p치gina
                const addrLine = (d.field_domicilio || "");
                items.push({
                  id: p.entity_id || id,
                  name: p.tooltip || null,
                  address: addrLine,
                  url: new URL(href, ORIGIN).toString(),
                  lat: c[1] ?? null,
                  lon: c[0] ?? null,
                  ensena: "Charter",
                  source_page: u
                });
              } catch (e) {
                console.error(`[ERR] ${u} ${e.message}`);
              }
            }

            // dedupe por id o name+address
            const seen = new Set();
            const dedup = items.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}`;
              if (seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.writeFile("docs/charter.json", JSON.stringify({
              source: "consum.es (sitemap + get-map/<id>)",
              city_filter: CITY,
              last_updated: new Date().toISOString(),
              count: dedup.length,
              items: dedup
            }, null, 2));

            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type: "FeatureCollection",
              features: dedup.map(s => ({
                type: "Feature",
                geometry: { type: "Point", coordinates: [s.lon, s.lat] },
                properties: { id: s.id, name: s.name, address: s.address, url: s.url, ensena: s.ensena }
              }))
            }, null, 2));

            console.error(`[END] total=${dedup.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs
            git commit -m "mvp sitemap: ${CITY:-barcelona} [skip ci]" || true
            git push
          else
            echo "Sin cambios"
          fi

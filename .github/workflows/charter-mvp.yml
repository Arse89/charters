- name: Build JSON (MVP debug)
  env: { CITY: ${{ github.event.inputs.city }} }
  run: |
    node - <<'JS'
    const fs = require("fs/promises");
    const base = "https://www.consum.es";
    const CITY = (process.env.CITY || "barcelona").toLowerCase();

    const url0 = `${base}/get-map-list/block_supermercados_en_${CITY}/`;

    async function getJson(u){
      const r = await fetch(u, { headers:{Accept:"application/json"} });
      if(!r.ok) throw new Error(`HTTP ${r.status} ${u}`);
      try { return await r.json(); } catch { return JSON.parse(await r.text()); }
    }

    function collectFeaturesFromSettings(settings){
      const maps = settings?.geofield_google_map || {};
      const keys = Object.keys(maps);
      let features = [];
      for(const k of keys){
        const f = maps[k]?.data?.features;
        if(Array.isArray(f)) features = features.concat(f);
      }
      return { keys, features };
    }

    const isCharter = (prop={})=>{
      const icon = String(prop.icon||"").toLowerCase();
      const html = String(prop.description||"").toLowerCase();
      return icon.includes("icon_map_charter") || html.includes("col-distancia charter");
    };

    (async()=>{
      await fs.mkdir("docs/debug", { recursive:true });

      // 1) Descarga inicial
      const data0 = await getJson(url0);
      await fs.writeFile(`docs/debug/${CITY}-init.json`, JSON.stringify(data0, null, 2));
      const settings0 = data0?.[0]?.settings || {};
      const ajaxViews = settings0?.views?.ajaxViews || {};
      const ajaxPath  = settings0?.views?.ajax_path || "/views/ajax/";

      const { keys: mapKeys0, features: feats0 } = collectFeaturesFromSettings(settings0);
      const c0 = feats0.filter(f=>isCharter(f.properties)).length;
      console.error(`[INIT] ajaxPath=${ajaxPath} mapBlocks=${mapKeys0.length} rawFeatures=${feats0.length} charter=${c0}`);

      // 2) Llamadas a views/ajax para cada display
      const ajaxUrl = new URL(ajaxPath, base).toString();
      let featsAll = feats0.slice();

      for(const [domId, v] of Object.entries(ajaxViews)){
        const form = new URLSearchParams({
          "view_name": v.view_name || "supermarkets",
          "view_display_id": v.view_display_id || "",
          "view_args": v.view_args || "",
          "view_path": v.view_path || "",
          "view_base_path": v.view_base_path || "supermercados",
          "view_dom_id": v.view_dom_id || "",
          "pager_element": String(v.pager_element ?? 0)
        });

        const r = await fetch(ajaxUrl, {
          method: "POST",
          headers: { "Content-Type":"application/x-www-form-urlencoded; charset=UTF-8" },
          body: form.toString()
        });
        if(!r.ok){ console.error(`[AJAX] ${domId} HTTP ${r.status}`); continue; }

        let resp; try { resp = await r.json(); } catch { resp = JSON.parse(await r.text()); }
        await fs.writeFile(`docs/debug/${CITY}-ajax-${domId}.json`, JSON.stringify(resp, null, 2));

        // En Drupal, el payload es un array de "commands". Busca el de "settings".
        const cmd = Array.isArray(resp) ? resp.find(x=>x?.command==="settings") : null;
        const settingsX = cmd?.settings;
        if(!settingsX){ console.error(`[AJAX] ${domId} sin settings`); continue; }

        const { keys: mapKeysX, features: featsX } = collectFeaturesFromSettings(settingsX);
        featsAll = featsAll.concat(featsX);

        const cX = featsX.filter(f=>isCharter(f.properties)).length;
        console.error(`[AJAX] ${v.view_display_id} mapBlocks=${mapKeysX.length} rawFeatures=${featsX.length} charter=${cX}`);
      }

      // 3) Normaliza, filtra Charter y dedup
      const items = featsAll
        .filter(f=>isCharter(f.properties))
        .map(f=>{
          const p=f.properties||{}, d=p.data||{}, c=(f.geometry?.coordinates)||[null,null];
          const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
          return {
            id: p.entity_id ?? null,
            name: p.tooltip ?? null,
            address: d.field_domicilio ?? null,
            province: CITY,
            lat: c[1] ?? null,
            lon: c[0] ?? null,
            url: href ? new URL(href, base).toString() : null,
            ensena: "Charter"
          };
        });

      const seen = new Set();
      const dedup = items.filter(x=>{
        const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}`;
        if(seen.has(k)) return false; seen.add(k); return true;
      });

      // 4) Salidas
      await fs.writeFile("docs/charter.json", JSON.stringify({
        source: "consum.es (get-map-list + views/ajax)",
        last_updated: new Date().toISOString(),
        count: dedup.length,
        items: dedup
      }, null, 2));

      await fs.writeFile("docs/charter.geojson", JSON.stringify({
        type:"FeatureCollection",
        features: dedup.map(s=>({
          type:"Feature",
          geometry:{ type:"Point", coordinates:[s.lon,s.lat] },
          properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena }
        }))
      }, null, 2));

      console.error(`[END] totalFeatures=${featsAll.length} totalCharter=${dedup.length}`);
      console.log(`OK ${CITY}`);
    })().catch(e=>{ console.error(e); process.exit(1); });
    JS

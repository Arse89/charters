name: charter-mvp
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Barcelona → listar fichas → get-map/<id> → Charter JSON
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const BASE = "https://www.consum.es";
          const LIST_URL = (p) => `${BASE}/supermercados/barcelona/?page=${p}`;
          const UA = {
            "User-Agent":"Mozilla/5.0",
            "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language":"es-ES,es;q=0.9",
            "Referer": `${BASE}/supermercados/barcelona/`
          };

          async function getText(u){
            const r = await fetch(u, { headers: UA });
            const t = await r.text();
            if (!r.ok) throw new Error(`HTTP ${r.status} ${u}\n${t.slice(0,200)}`);
            return t;
          }
          async function getJSON(u){
            const r = await fetch(u, { headers: { ...UA, Accept:"application/json" }});
            const t = await r.text();
            try { return JSON.parse(t); } catch { return null; }
          }

          // 1) Recorre páginas de listado y recoge enlaces a fichas
          async function collectStoreUrls(){
            const seen = new Set(), urls=[];
            for (let p=0; p<50; p++){
              let html; try { html = await getText(LIST_URL(p)); } catch(e){ break; }
              // extrae /supermercados/<slug>/
              const links = [...html.matchAll(/href="(\/supermercados\/[a-z0-9-]+\/)"/g)].map(m=>m[1]);
              let newCount = 0;
              for (const href of links){
                if (!seen.has(href)){ seen.add(href); urls.push(new URL(href, BASE).toString()); newCount++; }
              }
              console.error(`[LIST] page=${p} links=${links.length} new=${newCount}`);
              if (newCount === 0) break; // no hay más
            }
            return urls;
          }

          // 2) Extrae node id de la ficha
          function extractNodeId(html){
            const pats = [
              /<link[^>]+rel=["']shortlink["'][^>]+href=["'][^"']*\/node\/(\d+)["']/i,
              /data-history-node-id=["'](\d+)["']/i,
              /data-nid=["'](\d+)["']/i,
              /"entity_id"\s*:\s*"(\d+)"/i
            ];
            for (const re of pats){ const m = html.match(re); if (m) return m[1]; }
            return null;
          }

          // 3) De get-map/<id> saca Charter y coords
          function charterFromMap(json){
            const maps = json?.[0]?.settings?.geofield_google_map || {};
            const feats = Object.values(maps).flatMap(m=>m?.data?.features||[]);
            const f = feats.find(x=>{
              const icon = String(x?.properties?.icon||"").toLowerCase();
              const desc = String(x?.properties?.description||"").toLowerCase();
              return icon.includes("icon_map_charter") || desc.includes(" charter");
            });
            if (!f) return null;
            const p=f.properties||{}, d=p.data||{}, c=f.geometry?.coordinates||[null,null];
            const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
            return {
              id: p.entity_id ?? null,
              name: p.tooltip || null,
              address: d.field_domicilio || null,
              lat: c[1] ?? null,
              lon: c[0] ?? null,
              url: href ? new URL(href, BASE).toString() : null
            };
          }

          (async ()=>{
            const urls = await collectStoreUrls(); // fichas reales en Barcelona
            console.error(`[LIST] total_fichas=${urls.length}`);

            const items = [];
            for (const u of urls){
              try{
                const html = await getText(u);
                // si la propia ficha marca Charter, mantenlo como pista
                const isCharterHTML = /col-distancia\s+charter/i.test(html) || /icon_map_charter/i.test(html);
                const nid = extractNodeId(html);
                if (!nid && !isCharterHTML) continue;

                let rec = null;
                if (nid){
                  const mapJson = await getJSON(`${BASE}/get-map/${nid}/`);
                  rec = charterFromMap(mapJson);
                }
                if (!rec && isCharterHTML){
                  // sin JSON, pero la ficha lo marca como Charter; guarda sin coords
                  rec = { id: nid||null, name: null, address: null, lat: null, lon: null, url: u };
                }
                if (!rec) continue;

                items.push({ ...rec, ensena:"Charter", province:"barcelona" });
              }catch{}
            }

            // dedupe
            const seen = new Set();
            const out = items.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}|${x.url}`;
              if (seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.mkdir("docs", { recursive:true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source:"listado→ficha→get-map",
              city:"barcelona",
              last_updated:new Date().toISOString(),
              count: out.length,
              items: out
            }, null, 2));
            console.error(`[END] charter=${out.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/charter.json || true
          git commit -m "mvp: barcelona listado→ficha→get-map [skip ci]" || true
          git push || true 

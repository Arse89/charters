name: charter-mvp
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install deps
        run: npm i puppeteer@22

      - name: Scrape Charter (Barcelona, headless)
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const puppeteer = require("puppeteer");
          const ORIGIN = "https://www.consum.es";
          const START = `${ORIGIN}/supermercados/barcelona/`;

          const norm = s => (s||"").normalize("NFD").replace(/\p{Diacritic}/gu,"").toLowerCase();

          async function autoScroll(page, max=40, wait=1200){
            let last = 0;
            for (let i=0;i<max;i++){
              await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
              await page.waitForTimeout(wait);
              const cnt = await page.$$eval('article.node--type-supermarket-map', els => els.length);
              if (cnt <= last) break;
              last = cnt;
            }
            return last;
          }

          (async ()=>{
            const browser = await puppeteer.launch({headless:"new", args:["--no-sandbox","--disable-setuid-sandbox"]});
            const page = await browser.newPage();
            await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36");
            await page.goto(START, {waitUntil:"domcontentloaded"});
            const n = await autoScroll(page);
            console.error(`[SCROLL] tarjetas=${n}`);

            // extrae tarjetas Charter
            const cards = await page.$$eval('article.node--type-supermarket-map', els =>
              els.map(el => {
                const html = el.innerHTML.toLowerCase();
                const isCharter = html.includes('col-distancia charter') || html.includes('icon_map_charter');
                const a = el.querySelector('.supermarket-label a');
                return { isCharter, url: a ? a.href : null, name: a ? a.textContent.trim() : null };
              })
            );
            const stores = cards.filter(c => c.isCharter && c.url).filter((v,i,a)=>a.findIndex(x=>x.url===v.url)===i);
            console.error(`[PICK] charter_cards=${stores.length}`);

            // visita cada ficha y completa datos
            const detail = await browser.newPage();
            const out = [];
            for (const s of stores){
              try{
                await detail.goto(s.url, {waitUntil:"domcontentloaded"});
                const html = await detail.content();

                // id
                const id = (html.match(/data-history-node-id=["'](\d+)["']/i) || html.match(/\/node\/(\d+)/i) || [])[1] || null;

                // JSON-LD
                const jsonlds = await detail.$$eval('script[type="application/ld+json"]', ns => ns.map(n=>n.textContent));
                let addr = null, lat=null, lon=null;
                for (const txt of jsonlds){
                  try{
                    const val = JSON.parse(txt);
                    const arr = Array.isArray(val) ? val : [val];
                    for (const o of arr){
                      const a = o?.address;
                      if (a && !addr) addr = [a.streetAddress,a.postalCode,a.addressLocality,a.addressRegion].filter(Boolean).join(', ');
                      const g = o?.geo || o?.GeoCoordinates || o?.location?.geo;
                      if (g && g.latitude!=null && g.longitude!=null){ lat=+g.latitude; lon=+g.longitude; }
                    }
                  }catch{}
                }

                // fallback POINT (lon lat)
                if (lat==null || lon==null){
                  const m = html.match(/POINT\s*\(([-\d.]+)\s+([-\d.]+)\)/i);
                  if (m){ lon=+m[1]; lat=+m[2]; }
                }

                out.push({ id, name: s.name, address: addr, lat, lon, url: s.url, ensena: "Charter", province: "barcelona" });
              }catch{}
            }

            await fs.mkdir("docs", {recursive:true});
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source:"headless-dom",
              city:"barcelona",
              last_updated:new Date().toISOString(),
              count: out.length,
              items: out
            }, null, 2));

            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type:"FeatureCollection",
              features: out.map(s=>({ type:"Feature", geometry:{type:"Point", coordinates:[s.lon,s.lat]}, properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena } }))
            }, null, 2));

            console.error(`[END] charter=${out.length}`);
            await browser.close();
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/charter.json docs/charter.geojson || true
          git commit -m "mvp: barcelona headless [skip ci]" || true
          git push || true 

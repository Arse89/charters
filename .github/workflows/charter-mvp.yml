name: charter-mvp
on:
  workflow_dispatch:
    inputs:
      city:
        description: "Provincia slug (ej.: barcelona, valencia, alicante)"
        required: false
        default: "barcelona"
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build JSON con depuraci√≥n fuerte
        env:
          CITY: ${{ github.event.inputs.city }}
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const CITY = (process.env.CITY || "barcelona").toLowerCase();
          const ORIGIN = "https://www.consum.es";
          const FEED  = `${ORIGIN}/get-map-list/block_supermercados_en_${CITY}/`;
          const REFERER = `${ORIGIN}/supermercados/${CITY}/`;
          const H = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36",
            "Accept": "application/json, text/javascript, */*; q=0.01",
            "Accept-Language": "es-ES,es;q=0.9",
            "Referer": REFERER
          };

          async function get(u, opt={}) {
            const r = await fetch(u, { headers: H, ...opt });
            const raw = await r.text();
            if (!r.ok) throw new Error(`HTTP ${r.status} ${u}\n${raw.slice(0,400)}`);
            // intenta JSON, si no, devuelve null y guarda HTML
            try { return { json: JSON.parse(raw), raw }; }
            catch { return { json: null, raw }; }
          }

          function collect(settings){
            const maps = settings?.geofield_google_map || {};
            const blocks = Object.values(maps);
            const feats = blocks.flatMap(b => b?.data?.features ?? []);
            return { mapsCount:Object.keys(maps).length, feats };
          }

          const isCharter = (p={})=>{
            const icon = String(p.icon||"").toLowerCase();
            const html = String(p.description||"").toLowerCase();
            return icon.includes("icon_map_charter") || html.includes("col-distancia charter");
          };

          (async ()=>{
            await fs.mkdir("docs/debug", { recursive:true });

            // 1) GET feed inicial
            const init = await get(FEED);
            await fs.writeFile(`docs/debug/${CITY}-init.raw.txt`, init.raw);
            if (!init.json) throw new Error("El feed inicial no es JSON. Revisa docs/debug/*-init.raw.txt (WAF/idioma).");

            const data0 = init.json;
            await fs.writeFile(`docs/debug/${CITY}-init.json`, JSON.stringify(data0,null,2));

            const set0 = data0?.[0]?.settings || {};
            const ajaxViews = set0?.views?.ajaxViews || {};
            const ajaxPath  = set0?.views?.ajax_path || "/views/ajax/";
            const libs = set0?.ajaxPageState?.libraries || "";
            const theme= set0?.ajaxPageState?.theme || "";
            const ajaxURL = new URL(ajaxPath, ORIGIN).toString();

            const c0 = collect(set0);
            console.error(`[INIT] path=${ajaxPath} blocks=${c0.mapsCount} raw=${c0.feats.length} charter=${c0.feats.filter(f=>isCharter(f.properties)).length}`);

            // 2) POST a todos los views/ajax publicados
            let featsAll = c0.feats.slice();
            for (const [domId, v] of Object.entries(ajaxViews)) {
              const form = new URLSearchParams({
                view_name: v.view_name || "supermarkets",
                view_display_id: v.view_display_id || "",
                view_args: v.view_args || "",
                view_path: v.view_path || "",
                view_base_path: v.view_base_path || "supermercados",
                view_dom_id: v.view_dom_id || "",
                pager_element: String(v.pager_element ?? 0),
                "ajax_page_state[libraries]": libs,
                "ajax_page_state[theme]": theme
              });

              const r = await fetch(ajaxURL, {
                method: "POST",
                headers: {
                  ...H,
                  "Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
                  "X-Requested-With":"XMLHttpRequest"
                },
                body: form.toString()
              });

              const raw = await r.text();
              await fs.writeFile(`docs/debug/${CITY}-ajax-${domId}.raw.txt`, raw);
              let resp; try { resp = JSON.parse(raw); } catch { resp = null; }

              if (!resp) { console.error(`[AJAX] ${domId} sin JSON`); continue; }
              await fs.writeFile(`docs/debug/${CITY}-ajax-${domId}.json`, JSON.stringify(resp,null,2));

              const cmd = Array.isArray(resp) ? resp.find(x=>x?.command==="settings") : null;
              const setX = cmd?.settings;
              if (!setX) { console.error(`[AJAX] ${domId} sin settings`); continue; }

              const cx = collect(setX);
              featsAll = featsAll.concat(cx.feats);
              console.error(`[AJAX] ${v.view_display_id} blocks=${cx.mapsCount} raw=${cx.feats.length} charter=${cx.feats.filter(f=>isCharter(f.properties)).length}`);
            }

            // 3) Normaliza + Charter + dedupe
            const items = featsAll
              .filter(f=>isCharter(f.properties))
              .map(f=>{
                const p=f.properties||{}, d=p.data||{}, c=(f.geometry?.coordinates)||[null,null];
                const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
                return {
                  id: p.entity_id ?? null,
                  name: p.tooltip ?? null,
                  address: d.field_domicilio ?? null,
                  province: CITY,
                  lat: c[1] ?? null,
                  lon: c[0] ?? null,
                  url: href ? new URL(href, ORIGIN).toString() : null,
                  ensena: "Charter"
                };
              });

            const seen = new Set();
            const dedup = items.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}`;
              if(seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.writeFile("docs/charter.json", JSON.stringify({
              source: "consum.es (get-map-list + views/ajax)",
              last_updated: new Date().toISOString(),
              count: dedup.length,
              items: dedup
            }, null, 2));

            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type:"FeatureCollection",
              features: dedup.map(s=>({
                type:"Feature",
                geometry:{ type:"Point", coordinates:[s.lon,s.lat] },
                properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena }
              }))
            }, null, 2));

            console.error(`[END] totalRaw=${featsAll.length} totalCharter=${dedup.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs
            git commit -m "mvp: ${CITY:-barcelona} Charter [skip ci]" || true
            git push
          else
            echo "Sin cambios"
          fi

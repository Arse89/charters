name: charter-mvp
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Fetch Charter (barcelona Â· page 0)
        run: |
          node - <<'JS'
          const fs = require("fs/promises");

          const ORIGIN = "https://www.consum.es";
          const DISPLAY_IDS = [
            "block_supermercados_en_barcelona",
            "attachment_supermercados_en_barcelona"
          ];

          const H = {
            "User-Agent":"Mozilla/5.0",
            "Accept":"application/json, text/javascript, */*; q=0.01",
            "Accept-Language":"es-ES,es;q=0.9",
            "Referer": `${ORIGIN}/supermercados/barcelona/`
          };

          const isCharter = (p={})=>{
            const icon = String(p.icon||"").toLowerCase();
            const html = String(p.description||"").toLowerCase();
            return icon.includes("icon_map_charter") || html.includes(" charter");
          };

          const featuresFrom = (json)=>{
            const st = json?.[0]?.settings || {};
            const maps = st.geofield_google_map || {};
            return Object.values(maps).flatMap(m=>m?.data?.features||[]);
          };

          async function getJSON(url){
            const r = await fetch(url, { headers: H });
            const t = await r.text();
            if (!r.ok) throw new Error(`HTTP ${r.status} ${url}\n${t.slice(0,200)}`);
            let j; try { j = JSON.parse(t); } catch(e){ throw new Error(`No JSON en ${url}`); }
            return j;
          }

          (async ()=>{
            let featsAll = [];
            for (const id of DISPLAY_IDS){
              const url = `${ORIGIN}/get-map-list/${id}/?page=0`;
              try{
                const j = await getJSON(url);
                const f = featuresFrom(j);
                console.error(`[FEED] ${id} p0 -> ${f.length} features`);
                featsAll = featsAll.concat(f);
              }catch(e){
                console.error(`[ERR] ${id}: ${e.message}`);
              }
            }

            const items = featsAll
              .filter(f=>isCharter(f.properties))
              .map(f=>{
                const p=f.properties||{}, d=p.data||{}, c=f.geometry?.coordinates||[null,null];
                const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
                return {
                  id: p.entity_id ?? null,
                  name: p.tooltip || null,
                  address: d.field_domicilio || null,
                  lat: c[1] ?? null,
                  lon: c[0] ?? null,
                  url: href ? new URL(href, ORIGIN).toString() : null,
                  ensena: "Charter"
                };
              });

            await fs.mkdir("docs", { recursive:true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source: "get-map-list (barcelona, page=0)",
              count: items.length,
              items
            }, null, 2));

            console.error(`[END] charter=${items.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/charter.json || true
          git commit -m "mvp: barcelona p0" || true
          git push || true 

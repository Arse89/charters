name: charter-mvp
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install Puppeteer
        run: npm i puppeteer@24.15.0

      - name: Scrape Charter (Barcelona, headless)
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const puppeteer = require("puppeteer");

          const ORIGIN = "https://www.consum.es";
          const START  = `${ORIGIN}/supermercados/barcelona/`;

          const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));
          const norm = s => (s||"").normalize("NFD").replace(/\p{Diacritic}/gu,"").toLowerCase();

          async function clickCookieIfAny(page){
            await page.evaluate(() => {
              const btn = document.querySelector('#onetrust-accept-btn-handler');
              if (btn) btn.click();
            });
            await sleep(600);
            await page.evaluate(() => {
              const texts = ["aceptar","accept","agree","consent"];
              const els = Array.from(document.querySelectorAll('button,a,[role="button"]'));
              const hit = els.find(el => texts.includes((el.textContent||"").trim().toLowerCase()));
              if (hit) hit.click();
            });
            await sleep(600);
          }

          async function applyCharterFilter(page){
            // Intenta pulsar el filtro "Charter". Si no existe, seguimos sin Ã©l.
            await page.evaluate(() => {
              const byLabel = Array.from(document.querySelectorAll('label'))
                .find(l => (l.textContent||"").trim().toLowerCase() === 'charter');
              if (byLabel) {
                const inp = byLabel.querySelector('input'); if (inp) inp.click(); else byLabel.click();
                return;
              }
              const inp = document.querySelector('input[id*="charter" i],input[value*="charter" i],input[name*="charter" i]');
              if (inp) inp.click();
            });
            await sleep(1200);
          }

          async function autoScroll(page, max=40, wait=1200){
            let last = 0;
            for (let i=0;i<max;i++){
              await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
              await sleep(wait);
              const cnt = await page.$$eval('article.node--type-supermarket-map', els => els.length).catch(()=>0);
              if (cnt <= last) break;
              last = cnt;
            }
            await page.evaluate(() => window.scrollTo(0,0));
            return last;
          }

          (async ()=>{
            const browser = await puppeteer.launch({ headless: true, args:["--no-sandbox","--disable-setuid-sandbox"] });
            const page = await browser.newPage();
            await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36");
            await page.setExtraHTTPHeaders({ "Accept-Language":"es-ES,es;q=0.9" });

            await page.goto(START, { waitUntil:"domcontentloaded", timeout:60000 });
            await clickCookieIfAny(page);
            await applyCharterFilter(page); // si falla, no se rompe
            const n = await autoScroll(page);
            console.error(`[SCROLL] tarjetas=${n}`);

            const cards = await page.$$eval('article.node--type-supermarket-map', els =>
              els.map(el => {
                const a = el.querySelector('.supermarket-label a');
                return {
                  html: (el.innerHTML||"").toLowerCase(),
                  url: a ? a.href : null,
                  name: a ? a.textContent.trim() : null
                };
              })
            ).catch(()=>[]);

            const charterCards = cards
              .filter(c => c.url && (c.html.includes('col-distancia charter') || c.html.includes('icon_map_charter')))
              .filter((v,i,a)=>a.findIndex(x=>x.url===v.url)===i);

            console.error(`[PICK] charter_cards=${charterCards.length}`);

            const detail = await browser.newPage();
            const out = [];
            for (const s of charterCards){
              try{
                await detail.goto(s.url, { waitUntil:"domcontentloaded", timeout:60000 });
                // JSON-LD
                const ldTexts = await detail.$$eval('script[type="application/ld+json"]', ns => ns.map(n=>n.textContent)).catch(()=>[]);
                let addr=null, lat=null, lon=null;
                for (const txt of ldTexts){
                  try{
                    const val = JSON.parse(txt); const arr = Array.isArray(val)?val:[val];
                    for (const o of arr){
                      const a=o?.address; if (a && !addr) addr=[a.streetAddress,a.postalCode,a.addressLocality,a.addressRegion].filter(Boolean).join(', ');
                      const g=o?.geo||o?.GeoCoordinates||o?.location?.geo;
                      if (g && g.latitude!=null && g.longitude!=null){ lat=+g.latitude; lon=+g.longitude; }
                    }
                  }catch{}
                }
                if (lat==null || lon==null){
                  const html = await detail.content();
                  const m = html.match(/POINT\s*\(([-\d.]+)\s+([-\d.]+)\)/i);
                  if (m){ lon=+m[1]; lat=+m[2]; }
                }
                const nid = await detail.evaluate(() => {
                  const link = document.querySelector('link[rel="shortlink"]');
                  const m = link && link.href.match(/\/node\/(\d+)/);
                  return m ? m[1] : null;
                }).catch(()=>null);

                out.push({ id:nid, name:s.name, address:addr, lat, lon, url:s.url, ensena:"Charter", province:"barcelona" });
              }catch{}
            }

            await browser.close();

            // dedupe
            const seen = new Set();
            const items = out.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${norm(x.name)}|${norm(x.address)}|${x.url}`;
              if (seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.mkdir("docs", { recursive:true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source:"puppeteer (filtro UI opcional + scroll + ficha)",
              city:"barcelona",
              last_updated:new Date().toISOString(),
              count: items.length,
              items
            }, null, 2));
            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type:"FeatureCollection",
              features: items.map(s=>({ type:"Feature", geometry:{type:"Point", coordinates:[s.lon,s.lat]}, properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena } }))
            }, null, 2));

            console.error(`[END] total_charter=${items.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs/charter.json docs/charter.geojson
            git commit -m "refresh: Charter data [skip ci]" || true
            git push || true
          else
            echo "Sin cambios"
          fi 

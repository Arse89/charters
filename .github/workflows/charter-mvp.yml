name: charter-mvp
on:
  workflow_dispatch: {}
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Install Puppeteer
        run: npm i puppeteer@24.15.0

      - name: Capture AJAX + build JSON (Barcelona)
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const puppeteer = require("puppeteer");

          const ORIGIN = "https://www.consum.es";
          const START  = `${ORIGIN}/supermercados/barcelona/`;

          const sleep = ms => new Promise(r=>setTimeout(r,ms));

          const isCharter = (p={})=>{
            const icon = String(p.icon||"").toLowerCase();
            const html = String(p.description||"").toLowerCase();
            return icon.includes("icon_map_charter") || html.includes(" charter");
          };
          const collectFromSettings = (settings)=>{
            const maps = settings?.geofield_google_map || {};
            return Object.values(maps).flatMap(m=>m?.data?.features||[]);
          };

          (async ()=>{
            const browser = await puppeteer.launch({ headless:true, args:["--no-sandbox","--disable-setuid-sandbox"] });
            const page = await browser.newPage();
            await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36");
            await page.setExtraHTTPHeaders({ "Accept-Language":"es-ES,es;q=0.9" });

            // Captura central de /views/ajax
            const allFeats = [];
            const seenAjax = new Set();
            page.on("response", async (res)=>{
              try{
                const url = res.url();
                if (!url.includes("/views/ajax")) return;
                if (seenAjax.has(url + "|" + res.request().method())) return;
                seenAjax.add(url + "|" + res.request().method());

                const ct = res.headers()["content-type"]||"";
                if (!ct.includes("json")) return;
                const payload = await res.json().catch(()=>null);
                if (!Array.isArray(payload)) return;

                const cmd = payload.find(x=>x?.command==="settings");
                const settings = cmd?.settings;
                if (!settings) return;

                const feats = collectFromSettings(settings);
                allFeats.push(...feats);
                const c = feats.filter(f=>isCharter(f.properties)).length;
                console.error(`[AJAX] +${feats.length} feats, charter=${c}`);
              }catch{}
            });

            await page.goto(START, { waitUntil:"domcontentloaded", timeout:60000 });

            // cookies
            await page.evaluate(() => {
              const b=document.querySelector('#onetrust-accept-btn-handler'); if(b) b.click();
            }).catch(()=>{});
            await sleep(800);

            // intenta activar filtro "Charter" si existe
            await page.evaluate(()=>{
              const byLabel=[...document.querySelectorAll('label')]
                .find(l=>(l.textContent||"").trim().toLowerCase()==='charter');
              if(byLabel){ (byLabel.querySelector('input')||byLabel).click(); return; }
              const inp=document.querySelector('input[id*="charter" i],input[value*="charter" i],input[name*="charter" i]');
              if(inp) inp.click();
            }).catch(()=>{});
            await sleep(1200);

            // toma features iniciales desde drupalSettings embebido
            const initSettings = await page.evaluate(()=>{
              try{
                const s=document.querySelector('script[data-drupal-selector="drupal-settings-json"]');
                if(s) return JSON.parse(s.textContent);
                return window.drupalSettings||null;
              }catch{ return null; }
            });
            if (initSettings){
              const f0 = collectFromSettings(initSettings);
              allFeats.push(...f0);
              console.error(`[INIT] feats=${f0.length} charter=${f0.filter(f=>isCharter(f.properties)).length}`);
            } else {
              console.error(`[INIT] sin drupalSettings`);
            }

            // auto-scroll: dispara peticiones /views/ajax y deja que el listener las acumule
            let lastCnt = 0, stagnant = 0;
            for (let i=0;i<40;i++){
              await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight)).catch(()=>{});
              await sleep(1400);
              const curr = allFeats.length;
              if (curr<=lastCnt) stagnant++; else stagnant=0;
              lastCnt = curr;
              if (stagnant>=3) break; // no entran nuevos
            }

            await browser.close();

            // dedupe por id o name+addr
            const items = [];
            const seen = new Set();
            for (const f of allFeats){
              if (!isCharter(f?.properties)) continue;
              const p=f.properties||{}, d=p.data||{}, c=f.geometry?.coordinates||[null,null];
              const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
              const rec = {
                id: p.entity_id ?? null,
                name: p.tooltip || null,
                address: d.field_domicilio || null,
                province: "barcelona",
                lat: c[1] ?? null,
                lon: c[0] ?? null,
                url: href ? new URL(href, ORIGIN).toString() : null,
                ensena: "Charter"
              };
              const k = rec.id ? `id:${rec.id}` : `na:${rec.name}|${rec.address}`;
              if (seen.has(k)) continue; seen.add(k);
              items.push(rec);
            }

            await fs.mkdir("docs", { recursive:true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source:"views/ajax capture",
              city:"barcelona",
              last_updated:new Date().toISOString(),
              count: items.length,
              items
            }, null, 2));
            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type:"FeatureCollection",
              features: items.map(s=>({
                type:"Feature",
                geometry:{ type:"Point", coordinates:[s.lon,s.lat] },
                properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena }
              }))
            }, null, 2));

            console.error(`[END] ajax_calls=${seenAjax.size} features_total=${allFeats.length} charter=${items.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs/charter.json docs/charter.geojson
            git commit -m "refresh: Charter data [skip ci]" || true
            git push || true
          else
            echo "Sin cambios"
          fi 

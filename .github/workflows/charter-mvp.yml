name: charter-mvp
on:
  workflow_dispatch:
    inputs:
      city:
        description: "Provincia slug (p. ej. barcelona)"
        required: false
        default: "barcelona"
permissions: { contents: write }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }

      - name: Build JSON (get-map-list paginado, sin AJAX)
        env: { CITY: ${{ github.event.inputs.city }} }
        run: |
          node - <<'JS'
          const fs = require("fs/promises");

          const CITY = (process.env.CITY || "barcelona").toLowerCase();
          const ORIGIN = "https://www.consum.es";
          const HEAD = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/125 Safari/537.36",
            "Accept": "application/json, text/javascript, */*; q=0.01",
            "Accept-Language": "es-ES,es;q=0.9",
            "Referer": `${ORIGIN}/supermercados/${CITY}/`
          };

          async function getJSON(u){
            const r = await fetch(u, { headers: HEAD });
            const t = await r.text();
            if (!r.ok) throw new Error(`HTTP ${r.status} ${u}\n${t.slice(0,300)}`);
            try { return JSON.parse(t); } catch { throw new Error(`No JSON en ${u}`); }
          }

          const isCharter = (p={})=>{
            const icon = String(p.icon||"").toLowerCase();
            const html = String(p.description||"").toLowerCase();
            return icon.includes("icon_map_charter") || html.includes(" charter");
          };

          function featuresFromSettings(settings){
            const maps = settings?.geofield_google_map || {};
            return Object.values(maps).flatMap(m => m?.data?.features ?? []);
          }

          async function collectDisplay(displayId){
            let all = [];
            const seen = new Set(); // entity_id ya vistos
            for (let page=0; page<60; page++){
              const url = `${ORIGIN}/get-map-list/${displayId}/?page=${page}`;
              let json;
              try { json = await getJSON(url); }
              catch(e){ if(page===0) console.error(`[WARN] ${displayId} p${page}: ${e.message}`); break; }
              const settings = json?.[0]?.settings || {};
              const feats = featuresFromSettings(settings);
              const newOnes = [];
              for (const f of feats){
                const id = f?.properties?.entity_id || `${f?.properties?.tooltip}|${f?.properties?.data?.field_domicilio||""}`;
                if (!id) continue;
                if (seen.has(id)) continue;
                seen.add(id);
                newOnes.push(f);
              }
              const charters = newOnes.filter(f => isCharter(f.properties));
              console.error(`[FEED] ${displayId} p${page} feats=${feats.length} new=${newOnes.length} charter_new=${charters.length}`);
              all = all.concat(newOnes);
              // corte: si no hay nuevos en esta página, asumimos fin
              if (newOnes.length === 0) break;
              // seguridad: si una página trae 0 feats, fin
              if (feats.length === 0) break;
            }
            return all;
          }

          (async ()=>{
            const displays = [
              `block_supermercados_en_${CITY}`,
              `attachment_supermercados_en_${CITY}`
            ];

            let allFeats = [];
            for (const d of displays){
              const feats = await collectDisplay(d);
              allFeats = allFeats.concat(feats);
            }

            // filtra Charter y normaliza
            const itemsRaw = allFeats
              .filter(f => isCharter(f?.properties))
              .map(f => {
                const p = f.properties || {};
                const d = p.data || {};
                const c = f.geometry?.coordinates || [null,null];
                const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
                return {
                  id: p.entity_id ?? null,
                  name: p.tooltip || null,
                  address: d.field_domicilio || null,
                  province: CITY,
                  lat: c[1] ?? null,
                  lon: c[0] ?? null,
                  url: href ? new URL(href, ORIGIN).toString() : null,
                  ensena: "Charter"
                };
              });

            // dedupe final
            const seen = new Set();
            const items = itemsRaw.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}`;
              if (seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.mkdir("docs", { recursive:true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source: "consum.es (get-map-list ?page=N)",
              city: CITY,
              last_updated: new Date().toISOString(),
              count: items.length,
              items
            }, null, 2));

            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type:"FeatureCollection",
              features: items.map(s=>({
                type:"Feature",
                geometry:{ type:"Point", coordinates:[s.lon,s.lat] },
                properties:{ id:s.id,name:s.name,address:s.address,province:s.province,url:s.url,ensena:s.ensena }
              }))
            }, null, 2));

            console.error(`[END] total_charter=${items.length}`);
            console.log("OK");
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs
            git commit -m "mvp: ${CITY:-barcelona} Charter (get-map-list paginado) [skip ci]" || true
            git push
          else
            echo "Sin cambios"
          fi

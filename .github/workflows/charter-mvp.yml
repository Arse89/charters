name: charter-mvp
on:
  workflow_dispatch:
    inputs:
      city:
        description: "Provincia slug (ej.: barcelona, valencia, alicante)"
        required: false
        default: "barcelona"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Export CITY for later steps
        run: echo "CITY=${{ github.event.inputs.city || 'barcelona' }}" >> $GITHUB_ENV

      - name: Build JSON (1 provincia, all map blocks)
        run: |
          node - <<'JS'
          const fs = require("fs/promises");
          const CITY = (process.env.CITY || "barcelona").toLowerCase();
          const BASE = "https://www.consum.es/get-map-list/block_supermercados_en_";

          async function fetchJson(url){
            const res = await fetch(url, { headers:{Accept:"application/json"} });
            if(!res.ok) throw new Error(`HTTP ${res.status} ${url}`);
            try { return await res.json(); } catch { return JSON.parse(await res.text()); }
          }

          (async ()=>{
            const url = `${BASE}${CITY}/`;
            const data = await fetchJson(url);

            // Unir TODOS los bloques del mapa
            const maps = data?.[0]?.settings?.geofield_google_map || {};
            let features = [];
            for (const k of Object.keys(maps)) {
              const f = maps[k]?.data?.features;
              if (Array.isArray(f)) features = features.concat(f);
            }

            const items = features
              .filter(f => String(f?.properties?.icon||"").toLowerCase().includes("charter"))
              .map(f=>{
                const p=f.properties||{}, d=p.data||{}, c=(f.geometry&&f.geometry.coordinates)||[null,null];
                const href = String(p.description||"").match(/href="([^"]+)"/)?.[1] || null;
                return {
                  id: p.entity_id ?? null,
                  name: p.tooltip ?? null,
                  address: d.field_domicilio ?? null,
                  province: CITY,
                  lat: c[1] ?? null,
                  lon: c[0] ?? null,
                  url: href ? new URL(href, "https://www.consum.es").toString() : null,
                  ensena: "Charter"
                };
              });

            // Deduplicar
            const seen = new Set();
            const dedup = items.filter(x=>{
              const k = x.id ? `id:${x.id}` : `na:${x.name}|${x.address}`;
              if (seen.has(k)) return false; seen.add(k); return true;
            });

            await fs.mkdir("docs", { recursive: true });
            await fs.writeFile("docs/charter.json", JSON.stringify({
              source: "consum.es locator",
              last_updated: new Date().toISOString(),
              count: dedup.length,
              items: dedup
            }, null, 2));

            await fs.writeFile("docs/charter.geojson", JSON.stringify({
              type: "FeatureCollection",
              features: dedup.map(s => ({
                type: "Feature",
                geometry: { type: "Point", coordinates: [s.lon, s.lat] },
                properties: { id: s.id, name: s.name, address: s.address, province: s.province, url: s.url, ensena: s.ensena }
              }))
            }, null, 2));

            console.log(`OK ${CITY}: ${dedup.length} Charter`);
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS

      - name: Commit if changed
        run: |
          if [[ -n "$(git status --porcelain docs)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs/charter.json docs/charter.geojson
            git commit -m "mvp: ${CITY} Charter [skip ci]"
            git pull --rebase
            git push
          else
            echo "Sin cambios"
          fi
